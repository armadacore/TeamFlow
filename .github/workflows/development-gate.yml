name: Development gate

on:
  push:
    branches:
      - '**'
      - '!master'
      - '!develop'

jobs:
  debuggin:
    strategy:
      fail-fast: true
      matrix:
        include:
#          - platform: 'macos-latest'
#            args: '--target aarch64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    env:
      APPLE_ID: ${{secrets.APPLE_ID}}
      APPLE_PASSWORD: ${{secrets.APPLE_PASSWORD}}
      APPLE_TEAM_ID: ${{secrets.APPLE_TEAM_ID}}
      APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
    steps:
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install frontend dependencies
        run: npm ci --force

      - name: Provoke failure on Windows
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Provoke failure on Windows"
          exit 1

      - name: Import Apple Developer Certificate
        if: matrix.platform == 'ubuntu-24.04'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "APPLE_KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "APPLE_KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "APPLE_KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        if: matrix.platform == 'ubuntu-24.04'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Release draft
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
#  vulnerability-check:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Install nodejs
#        uses: actions/setup-node@v4
#        with:
#          node-version: '22'
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install dependencies
#        run: npm ci --force
#
#      - name: Check licenses
#        run: npm run license:check
#
#      - name: Check outdated
#        run: npm run outdated:check
#
#  code-check:
#    needs: vulnerability-check
#    if: ${{ success() }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Install nodejs
#        uses: actions/setup-node@v4
#        with:
#          node-version: '22'
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install dependencies
#        run: npm ci --force
#
#      - name: Check eslint
#        run: npm run eslint:check
#
#      - name: Check TypeScript type
#        run: npm run type:check
#
#      - name: Unit test
#        run: npm run test

