name: Development gate

on:
  push:
    branches:
      - '**'
      - '!master'
      - '!develop'

jobs:
  vulnerability-check:
    runs-on: ubuntu-latest
    steps:
      - name: Install nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci --force

      - name: Check licenses
        run: npm run license:check

      - name: Check outdated
        run: npm run outdated:check

  code-check:
    needs: vulnerability-check
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Install nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci --force

      - name: Check eslint
        run: npm run eslint:check

      - name: Check TypeScript type
        run: npm run type:check

      - name: Unit test
        run: npm run test

  debugging:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: 'aarch64-apple-darwin'

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci --force

      - name: Import Apple Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Entpacke die Base64-kodierte Zertifikat-Datei
          echo "$APPLE_CERTIFICATE" | base64 --decode > apple_certificate.p12

          # Importiere das Zertifikat in den macOS-Schlüsselbund
          security create-keychain -p "" build.keychain
          security import apple_certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          # Setze den temporären Schlüsselbund als Standard
          security list-keychains -d user -s build.keychain login.keychain
          security default-keychain -s build.keychain

          # Entsperre den Schlüsselbund
          security unlock-keychain -p ""

          # Berechtigungen für den Schlüsselbund setzen
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Validate Imported Certificate
        run: security find-identity -v -p codesigning

      - name: Build Tauri app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
#          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_SIGNING_IDENTITY: "Apple Development: Marcel Armada-Castellon ($APPLE_TEAM_ID)"
        run: npm run tauri build -- --target aarch64-apple-darwin

      - name: Compress TeamFlow.app
        run: zip -r TeamFlow-app.zip ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/TeamFlow.app

      - name: Upload .app as artifact
        uses: actions/upload-artifact@v3
        with:
          name: TeamFlow-macos-app
          path: TeamFlow-app.zip
