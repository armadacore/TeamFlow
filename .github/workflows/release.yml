name: Release

on:
  push:
    branches:
      - develop
#  release:
#    types:
#      - edited


#  pull_request:
#    branches:
#      - master
#    types:
#      - closed

jobs:
#  prepare-release:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Remove drafts
#        uses: hugo19941994/delete-draft-releases@v1.0.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  release:
#    needs: prepare-release
#    if: ${{ success() }}
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
##          - platform: 'macos-latest'
##            args: '--target aarch64-apple-darwin'
#          - platform: 'ubuntu-22.04'
#            args: ''
##          - platform: 'windows-latest'
##            args: ''
#    runs-on: ${{ matrix.platform }}
#    env:
#      APPLE_ID: ${{secrets.APPLE_ID}}
#      APPLE_PASSWORD: ${{secrets.APPLE_PASSWORD}}
#      APPLE_TEAM_ID: ${{secrets.APPLE_TEAM_ID}}
#      APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
#    steps:
#      - name: Install dependencies (ubuntu only)
#        if: matrix.platform == 'ubuntu-22.04'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '22'
#          cache: 'npm'
#
#      - name: Rust cache
#        uses: swatinem/rust-cache@v2
#        with:
#          workspaces: './src-tauri -> target'
#
#      - name: Install Rust stable
#        uses: dtolnay/rust-toolchain@stable
#        with:
#          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
#
#      - name: Install frontend dependencies
#        run: npm ci --force
#
#      - name: Import Apple Developer Certificate
#        if: matrix.platform == 'macos-latest'
#        env:
#          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
#          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
#        run: |
#          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
#          security create-keychain -p "APPLE_KEYCHAIN_PASSWORD" build.keychain
#          security default-keychain -s build.keychain
#          security unlock-keychain -p "APPLE_KEYCHAIN_PASSWORD" build.keychain
#          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
#          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "APPLE_KEYCHAIN_PASSWORD" build.keychain
#          security find-identity -v -p codesigning build.keychain
#
#      - name: Verify Certificate
#        if: matrix.platform == 'macos-latest'
#        run: |
#          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
#          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
#          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
#          echo "Certificate imported."
#
#      - name: Publish release
#        uses: tauri-apps/tauri-action@v0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
#          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
#          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
#          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
#          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
#        with:
#          tagName: v__VERSION__
#          releaseName: v__VERSION__
#          releaseBody: ${{ steps.release-notes.outputs.changelog }}
#          releaseDraft: false
#          prerelease: false
#          args: ${{ matrix.args }}
  release-notes:
#    needs: release
#    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from package.json
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1




#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#        with:
#          tag_name: v${{ steps.package-version.outputs.current-version }}
#          release_name: v${{ steps.package-version.outputs.current-version }}
#          tag_name: v0.0.0
#          release_name: v0.0.0
#          draft: true
#          prerelease: false




      - name: Build Changelog
        id: release-notes
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          failOnError: true
          configuration: release-notes.json
          fromTag: v0.0.0
          toTag: v${{ steps.package-version.outputs.current-version }}

      - name: Notes output
        run: |
          echo "${{ steps.release-notes.outputs.changelog }}"





#      - name: Update latest release body
#        uses: mini-bomba/create-github-release@v1.1.3
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          tag: v${{ steps.package-version.outputs.current-version }}
#          body: ${{ steps.release-notes.outputs.changelog }}
